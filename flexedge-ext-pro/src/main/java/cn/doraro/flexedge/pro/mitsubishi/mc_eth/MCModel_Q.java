

package cn.doraro.flexedge.pro.mitsubishi.mc_eth;

import cn.doraro.flexedge.core.UAVal;

class MCModel_Q extends MCModel {
    public MCModel_Q() {
        super("q", "Q Series");
        this.setAddrDef(new MCAddrDef("X", "Inputs").asValTpSeg(new MCAddrSeg(0, 16383, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(true).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 16368, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(true)).asValTpSeg(new MCAddrSeg(0, 16352, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(true)));
        this.setAddrDef(new MCAddrDef("DX", "Direct Inputs").asValTpSeg(new MCAddrSeg(0, 16383, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(true).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 16368, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(true)).asValTpSeg(new MCAddrSeg(0, 16352, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(true)));
        this.setAddrDef(new MCAddrDef("Y", "Outputs").asValTpSeg(new MCAddrSeg(0, 16383, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(true).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 16368, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(true)).asValTpSeg(new MCAddrSeg(0, 16352, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(true)));
        this.setAddrDef(new MCAddrDef("DY", "Direct Outputs").asValTpSeg(new MCAddrSeg(0, 16383, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(true).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 16368, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(true)).asValTpSeg(new MCAddrSeg(0, 16352, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(true)));
        this.setAddrDef(new MCAddrDef("B", "Link Relays").asValTpSeg(new MCAddrSeg(0, 16383, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(true).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 16368, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(true)).asValTpSeg(new MCAddrSeg(0, 16352, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(true)));
        this.setAddrDef(new MCAddrDef("SB", "Special Link Relays").asValTpSeg(new MCAddrSeg(0, 2047, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(true).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 2032, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(true)).asValTpSeg(new MCAddrSeg(0, 2016, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(true)));
        this.setAddrDef(new MCAddrDef("M", "Internal Relays").asValTpSeg(new MCAddrSeg(0, 16383, 5, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(false).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 16368, 5, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false)).asValTpSeg(new MCAddrSeg(0, 16352, 5, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(false)));
        this.setAddrDef(new MCAddrDef("SM", "Special Int. Relays").asValTpSeg(new MCAddrSeg(0, 2047, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(false).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 2032, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false)).asValTpSeg(new MCAddrSeg(0, 2016, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(false)));
        this.setAddrDef(new MCAddrDef("L", "Latch Relays").asValTpSeg(new MCAddrSeg(0, 16383, 5, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(false).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 16368, 5, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false)).asValTpSeg(new MCAddrSeg(0, 16352, 5, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(false)));
        this.setAddrDef(new MCAddrDef("F", "Annunciator Relays").asValTpSeg(new MCAddrSeg(0, 2047, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(false).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 2032, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false)).asValTpSeg(new MCAddrSeg(0, 2016, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(false)));
        this.setAddrDef(new MCAddrDef("V", "Edge Relays").asValTpSeg(new MCAddrSeg(0, 2047, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(false).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 2032, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false)).asValTpSeg(new MCAddrSeg(0, 2016, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(false)));
        this.setAddrDef(new MCAddrDef("TS", "Timer Contacts").asValTpSeg(new MCAddrSeg(0, 2047, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(false).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 2032, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false)).asValTpSeg(new MCAddrSeg(0, 2016, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(false)));
        this.setAddrDef(new MCAddrDef("TC", "Timer Coils").asValTpSeg(new MCAddrSeg(0, 2047, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(false).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 2032, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false)).asValTpSeg(new MCAddrSeg(0, 2016, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(false)));
        this.setAddrDef(new MCAddrDef("SS", "Integrating Timer Contacts").asValTpSeg(new MCAddrSeg(0, 2047, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(false).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 2032, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false)).asValTpSeg(new MCAddrSeg(0, 2016, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(false)));
        this.setAddrDef(new MCAddrDef("SC", "Integrating Timer Coils").asValTpSeg(new MCAddrSeg(0, 2047, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(false).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 2032, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false)).asValTpSeg(new MCAddrSeg(0, 2016, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(false)));
        this.setAddrDef(new MCAddrDef("CS", "Counter Contacts").asValTpSeg(new MCAddrSeg(0, 1023, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(false).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 1008, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false)).asValTpSeg(new MCAddrSeg(0, 992, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(false)));
        this.setAddrDef(new MCAddrDef("CC", "Counter Coils").asValTpSeg(new MCAddrSeg(0, 1023, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_bool}).asHex(false).asValBit(true)).asValTpSeg(new MCAddrSeg(0, 1008, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false)).asValTpSeg(new MCAddrSeg(0, 992, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(false)));
        this.setAddrDef(new MCAddrDef("TN", "Timer Value").asValTpSeg(new MCAddrSeg(0, 2047, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false)));
        this.setAddrDef(new MCAddrDef("SN", "Integrating Timer Value").asValTpSeg(new MCAddrSeg(0, 2047, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false)));
        this.setAddrDef(new MCAddrDef("CN", "Counter Value").asValTpSeg(new MCAddrSeg(0, 2047, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false)));
        this.setAddrDef(new MCAddrDef("D", "Data Registers").asValTpSeg(new MCAddrSeg(0, 12287, 5, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false).asBitPos(true)).asValTpSeg(new MCAddrSeg(0, 12286, 5, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32, UAVal.ValTP.vt_float}).asHex(false).asBitPos(true)));
        this.setAddrDef(new MCAddrDef("SD", "Special Data Registers").asValTpSeg(new MCAddrSeg(0, 2047, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false).asBitPos(true)).asValTpSeg(new MCAddrSeg(0, 2046, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32, UAVal.ValTP.vt_float}).asHex(false).asBitPos(true)));
        this.setAddrDef(new MCAddrDef("W", "Link Registers").asValTpSeg(new MCAddrSeg(0, 16383, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(true).asBitPos(true)).asValTpSeg(new MCAddrSeg(0, 16382, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32, UAVal.ValTP.vt_float}).asHex(true).asBitPos(true)));
        this.setAddrDef(new MCAddrDef("SW", "Special Link Registers").asValTpSeg(new MCAddrSeg(0, 2047, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(true).asBitPos(true)).asValTpSeg(new MCAddrSeg(0, 2046, 4, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32}).asHex(true).asBitPos(true)));
        this.setAddrDef(new MCAddrDef("R", "File Registers").asValTpSeg(new MCAddrSeg(0, 32767, 5, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false).asBitPos(true)).asValTpSeg(new MCAddrSeg(0, 32766, 5, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32, UAVal.ValTP.vt_float}).asHex(false).asBitPos(true)));
        this.setAddrDef(new MCAddrDef("Z", "Index Registers").asValTpSeg(new MCAddrSeg(0, 15, 2, new UAVal.ValTP[]{UAVal.ValTP.vt_int16, UAVal.ValTP.vt_uint16}).asHex(false).asBitPos(true)).asValTpSeg(new MCAddrSeg(0, 14, 2, new UAVal.ValTP[]{UAVal.ValTP.vt_int32, UAVal.ValTP.vt_uint32, UAVal.ValTP.vt_float}).asHex(false).asBitPos(true)));
    }
}
